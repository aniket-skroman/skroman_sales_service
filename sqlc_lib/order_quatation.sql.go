// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: order_quatation.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNewOrderQuatation = `-- name: CreateNewOrderQuatation :one
insert into order_quatation(
    lead_id,
    generated_by,
    quatation_link   
) values (
    $1,$2,$3
) returning id, lead_id, generated_by, quatation_link, created_at, updated_at
`

type CreateNewOrderQuatationParams struct {
	LeadID        uuid.UUID `json:"lead_id"`
	GeneratedBy   uuid.UUID `json:"generated_by"`
	QuatationLink string    `json:"quatation_link"`
}

// create a new order quatation
func (q *Queries) CreateNewOrderQuatation(ctx context.Context, arg CreateNewOrderQuatationParams) (OrderQuatation, error) {
	row := q.db.QueryRowContext(ctx, createNewOrderQuatation, arg.LeadID, arg.GeneratedBy, arg.QuatationLink)
	var i OrderQuatation
	err := row.Scan(
		&i.ID,
		&i.LeadID,
		&i.GeneratedBy,
		&i.QuatationLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderQuotation = `-- name: DeleteOrderQuotation :execresult
delete from order_quatation
where id = $1 and lead_id = $2
`

type DeleteOrderQuotationParams struct {
	ID     uuid.UUID `json:"id"`
	LeadID uuid.UUID `json:"lead_id"`
}

// delete order quotation by lead_id and quotation id
func (q *Queries) DeleteOrderQuotation(ctx context.Context, arg DeleteOrderQuotationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteOrderQuotation, arg.ID, arg.LeadID)
}

const fetchQuatationByLeadId = `-- name: FetchQuatationByLeadId :many
select id, lead_id, generated_by, quatation_link, created_at, updated_at from order_quatation
where lead_id = $1
`

// fetch order quatation by lead id
func (q *Queries) FetchQuatationByLeadId(ctx context.Context, leadID uuid.UUID) ([]OrderQuatation, error) {
	rows, err := q.db.QueryContext(ctx, fetchQuatationByLeadId, leadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderQuatation{}
	for rows.Next() {
		var i OrderQuatation
		if err := rows.Scan(
			&i.ID,
			&i.LeadID,
			&i.GeneratedBy,
			&i.QuatationLink,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchQuotationById = `-- name: FetchQuotationById :one
select id, lead_id, generated_by, quatation_link, created_at, updated_at from order_quatation
where id = $1
limit 1
`

// fetch quotation by quotation id
func (q *Queries) FetchQuotationById(ctx context.Context, id uuid.UUID) (OrderQuatation, error) {
	row := q.db.QueryRowContext(ctx, fetchQuotationById, id)
	var i OrderQuatation
	err := row.Scan(
		&i.ID,
		&i.LeadID,
		&i.GeneratedBy,
		&i.QuatationLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
