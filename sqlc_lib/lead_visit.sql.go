// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: lead_visit.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countOfLeadVisit = `-- name: CountOfLeadVisit :one
select count(*) from lead_visit
where lead_id = $1
`

func (q *Queries) CountOfLeadVisit(ctx context.Context, leadID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOfLeadVisit, leadID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLeadVisit = `-- name: CreateLeadVisit :one
insert into lead_visit (
    lead_id,
    visit_by,
    visit_discussion
) values (
    $1,$2,$3
) returning id, lead_id, visit_by, visit_discussion, created_at, updated_at
`

type CreateLeadVisitParams struct {
	LeadID          uuid.UUID `json:"lead_id"`
	VisitBy         uuid.UUID `json:"visit_by"`
	VisitDiscussion string    `json:"visit_discussion"`
}

func (q *Queries) CreateLeadVisit(ctx context.Context, arg CreateLeadVisitParams) (LeadVisit, error) {
	row := q.db.QueryRowContext(ctx, createLeadVisit, arg.LeadID, arg.VisitBy, arg.VisitDiscussion)
	var i LeadVisit
	err := row.Scan(
		&i.ID,
		&i.LeadID,
		&i.VisitBy,
		&i.VisitDiscussion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLeadVisit = `-- name: DeleteLeadVisit :execresult
delete from lead_visit
where lead_id = $1 and id = $2
`

type DeleteLeadVisitParams struct {
	LeadID uuid.UUID `json:"lead_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) DeleteLeadVisit(ctx context.Context, arg DeleteLeadVisitParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteLeadVisit, arg.LeadID, arg.ID)
}

const fetchAllVisitByLead = `-- name: FetchAllVisitByLead :many
select id, lead_id, visit_by, visit_discussion, created_at, updated_at from lead_visit
where lead_id = $1
order by created_at desc
`

func (q *Queries) FetchAllVisitByLead(ctx context.Context, leadID uuid.UUID) ([]LeadVisit, error) {
	rows, err := q.db.QueryContext(ctx, fetchAllVisitByLead, leadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LeadVisit{}
	for rows.Next() {
		var i LeadVisit
		if err := rows.Scan(
			&i.ID,
			&i.LeadID,
			&i.VisitBy,
			&i.VisitDiscussion,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
