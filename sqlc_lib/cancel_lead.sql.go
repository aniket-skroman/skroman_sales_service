// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: cancel_lead.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCancelLead = `-- name: CreateCancelLead :one
insert into cancel_leads (
    reason,
    cancel_by,
    lead_id
) values (
    $1, $2, $3
) returning id, cancel_by, lead_id, reason, created_at, updated_at
`

type CreateCancelLeadParams struct {
	Reason   string    `json:"reason"`
	CancelBy uuid.UUID `json:"cancel_by"`
	LeadID   uuid.UUID `json:"lead_id"`
}

// cancel lead
func (q *Queries) CreateCancelLead(ctx context.Context, arg CreateCancelLeadParams) (CancelLeads, error) {
	row := q.db.QueryRowContext(ctx, createCancelLead, arg.Reason, arg.CancelBy, arg.LeadID)
	var i CancelLeads
	err := row.Scan(
		&i.ID,
		&i.CancelBy,
		&i.LeadID,
		&i.Reason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchCancelLeadByLeadId = `-- name: FetchCancelLeadByLeadId :one
select id, cancel_by, lead_id, reason, created_at, updated_at from cancel_leads
where lead_id = $1
limit 1
`

func (q *Queries) FetchCancelLeadByLeadId(ctx context.Context, leadID uuid.UUID) (CancelLeads, error) {
	row := q.db.QueryRowContext(ctx, fetchCancelLeadByLeadId, leadID)
	var i CancelLeads
	err := row.Scan(
		&i.ID,
		&i.CancelBy,
		&i.LeadID,
		&i.Reason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
